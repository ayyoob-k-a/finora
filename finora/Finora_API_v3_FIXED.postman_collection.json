{
	"info": {
		"_postman_id": "finora-api-v3-fixed",
		"name": "Finora API v3 - SYNTAX FIXED",
		"description": "Updated Finora API collection with all syntax errors fixed and proper field mappings.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "finora-api-fixed"
	},
	"item": [
		{
			"name": "üè• Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has required fields', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('status');",
							"    pm.expect(response).to.have.property('database');",
							"    pm.expect(response).to.have.property('version');",
							"    pm.expect(response).to.have.property('timestamp');",
							"});",
							"",
							"// Save database status for other tests",
							"const response = pm.response.json();",
							"pm.environment.set('database_status', response.database);",
							"",
							"if (response.database === 'connected') {",
							"    console.log('‚úÖ Database is connected and ready');",
							"} else {",
							"    console.log('‚ö†Ô∏è Running in API-only mode (database not connected)');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": ["{{base_url}}"],
					"path": ["health"]
				},
				"description": "Check API health status, database connection, and system information"
			},
			"response": []
		},
		{
			"name": "üîê Send OTP",
			"event": [
				{
					"listen": "pre-request",
					"script": {
						"exec": [
							"// Clear any existing tokens before authentication",
							"pm.environment.unset('access_token');",
							"pm.environment.unset('refresh_token');",
							"pm.environment.unset('user_id');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected') {",
							"    pm.test('OTP sent successfully with database', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', true);",
							"        pm.expect(response).to.have.property('message');",
							"    });",
							"} else {",
							"    pm.test('Graceful error without database', function () {",
							"        pm.expect(pm.response.code).to.equal(503);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', false);",
							"        pm.expect(response.error).to.include('Database not available');",
							"    });",
							"}",
							"",
							"// Save phone for next request",
							"if (pm.response.code < 400) {",
							"    const requestBody = JSON.parse(pm.request.body.raw);",
							"    pm.environment.set('test_phone', requestBody.phone || requestBody.email);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"phone\": \"{{test_phone}}\",\n  \"email\": \"{{test_email}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/send-otp",
					"host": ["{{base_url}}"],
					"path": ["api", "auth", "send-otp"]
				},
				"description": "Send OTP to phone number or email"
			},
			"response": []
		},
		{
			"name": "üîê Verify OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected') {",
							"    pm.test('OTP verified successfully', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', true);",
							"        pm.expect(response).to.have.property('token');",
							"        pm.expect(response).to.have.property('user');",
							"        ",
							"        // Save authentication tokens",
							"        pm.environment.set('access_token', response.token);",
							"        if (response.refresh_token) {",
							"            pm.environment.set('refresh_token', response.refresh_token);",
							"        }",
							"        if (response.user && response.user.id) {",
							"            pm.environment.set('user_id', response.user.id);",
							"        }",
							"    });",
							"} else {",
							"    pm.test('Graceful error without database', function () {",
							"        pm.expect(pm.response.code).to.equal(503);",
							"        const response = pm.response.json();",
							"        pm.expect(response.error).to.include('Database not available');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"phone\": \"{{test_phone}}\",\n  \"otp\": \"123456\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/verify-otp",
					"host": ["{{base_url}}"],
					"path": ["api", "auth", "verify-otp"]
				},
				"description": "Verify OTP and receive JWT tokens"
			},
			"response": []
		},
		{
			"name": "üí∏ Create Transaction (FIXED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected' && pm.environment.get('access_token')) {",
							"    pm.test('Transaction created successfully', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', true);",
							"        ",
							"        if (response.data && response.data.id) {",
							"            pm.environment.set('transaction_id', response.data.id);",
							"        }",
							"    });",
							"} else {",
							"    pm.test('Expected response for current state', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([401, 503]);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"type\": \"expense\",\n  \"amount\": 25.50,\n  \"category_id\": \"{{category_id}}\",\n  \"description\": \"Coffee and pastry\",\n  \"transaction_date\": \"{{$isoTimestamp}}\",\n  \"is_recurring\": false,\n  \"recurring_frequency\": \"monthly\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/transactions",
					"host": ["{{base_url}}"],
					"path": ["api", "transactions"]
				},
				"description": "Create a new transaction with proper field mapping"
			},
			"response": []
		},
		{
			"name": "üí∏ Get Transactions (FIXED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected' && pm.environment.get('access_token')) {",
							"    pm.test('Transactions retrieved successfully', function () {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', true);",
							"        pm.expect(response.data).to.have.property('transactions');",
							"        pm.expect(response.data).to.have.property('pagination');",
							"        ",
							"        // Test the new pagination structure",
							"        pm.expect(response.data.pagination).to.have.property('page');",
							"        pm.expect(response.data.pagination).to.have.property('limit');",
							"        pm.expect(response.data.pagination).to.have.property('total');",
							"        pm.expect(response.data.pagination).to.have.property('total_pages');",
							"    });",
							"} else {",
							"    pm.test('Expected response for current state', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([401, 503]);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/transactions?page=1&limit=10&type=expense",
					"host": ["{{base_url}}"],
					"path": ["api", "transactions"],
					"query": [
						{
							"key": "page",
							"value": "1",
							"description": "Page number (default: 1)"
						},
						{
							"key": "limit",
							"value": "10",
							"description": "Items per page (default: 20)"
						},
						{
							"key": "type",
							"value": "expense",
							"description": "Filter by transaction type"
						}
					]
				},
				"description": "Get user transactions with corrected pagination structure"
			},
			"response": []
		},
		{
			"name": "üìÖ Create EMI (FIXED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected' && pm.response.code < 400) {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.id) {",
							"        pm.environment.set('emi_id', response.data.id);",
							"    }",
							"    pm.test('EMI created with description field', function () {",
							"        pm.expect(response.data).to.have.property('description');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Car Loan\",\n  \"total_amount\": 25000.00,\n  \"monthly_amount\": 450.00,\n  \"start_date\": \"2024-01-01T00:00:00Z\",\n  \"end_date\": \"2029-01-01T00:00:00Z\",\n  \"due_date\": 5,\n  \"description\": \"Monthly car loan payment - FIXED with description field\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/emis",
					"host": ["{{base_url}}"],
					"path": ["api", "emis"]
				},
				"description": "Create EMI with proper description field mapping"
			},
			"response": []
		},
		{
			"name": "üìÖ Record EMI Payment (FIXED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected' && pm.response.code < 400) {",
							"    const response = pm.response.json();",
							"    pm.test('EMI payment recorded with notes field', function () {",
							"        pm.expect(response.data).to.have.property('notes');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"amount\": 450.00,\n  \"payment_date\": \"{{$isoTimestamp}}\",\n  \"due_month\": \"2024-01-01T00:00:00Z\",\n  \"notes\": \"January payment - FIXED with notes field\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/emis/{{emi_id}}/payment",
					"host": ["{{base_url}}"],
					"path": ["api", "emis", "{{emi_id}}", "payment"]
				},
				"description": "Record EMI payment with proper notes field mapping"
			},
			"response": []
		},
		{
			"name": "üë• Send Friend Request",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"phone\": \"+1987654321\",\n  \"message\": \"Let's track expenses together!\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/friends/request",
					"host": ["{{base_url}}"],
					"path": ["api", "friends", "request"]
				},
				"description": "Send a friend request by phone number"
			},
			"response": []
		},
		{
			"name": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Create Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code < 400) {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.id) {",
							"        pm.environment.set('group_id', response.data.id);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekend Trip\",\n  \"description\": \"Mountain hiking trip expenses\",\n  \"member_ids\": [\"{{user_id}}\"]\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/groups",
					"host": ["{{base_url}}"],
					"path": ["api", "groups"]
				},
				"description": "Create a new expense group"
			},
			"response": []
		},
		{
			"name": "üìà Monthly Report",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/reports/monthly?month=2024-01",
					"host": ["{{base_url}}"],
					"path": ["api", "reports", "monthly"],
					"query": [
						{
							"key": "month",
							"value": "2024-01",
							"description": "Month in YYYY-MM format"
						}
					]
				},
				"description": "Get monthly spending report"
			},
			"response": []
		},
		{
			"name": "üîî Get Notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code < 400) {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.notifications && response.data.notifications.length > 0) {",
							"        pm.environment.set('notification_id', response.data.notifications[0].id);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/notifications?page=1&limit=20&unread_only=false",
					"host": ["{{base_url}}"],
					"path": ["api", "notifications"],
					"query": [
						{
							"key": "page",
							"value": "1",
							"description": "Page number"
						},
						{
							"key": "limit", 
							"value": "20",
							"description": "Items per page"
						},
						{
							"key": "unread_only",
							"value": "false",
							"description": "Show only unread notifications"
						}
					]
				},
				"description": "Get user notifications"
			},
			"response": []
		},
		{
			"name": "üìä Get Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const dbStatus = pm.environment.get('database_status');",
							"",
							"if (dbStatus === 'connected') {",
							"    pm.test('Categories retrieved successfully', function () {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('success', true);",
							"        pm.expect(response.data).to.be.an('array');",
							"        ",
							"        // Save first category ID for other tests",
							"        if (response.data.length > 0) {",
							"            pm.environment.set('category_id', response.data[0].id);",
							"        }",
							"    });",
							"} else {",
							"    pm.test('Returns placeholder data without database', function () {",
							"        pm.expect(pm.response.code).to.equal(200);",
							"        const response = pm.response.json();",
							"        pm.expect(response).to.have.property('message');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/categories",
					"host": ["{{base_url}}"],
					"path": ["api", "categories"]
				},
				"description": "Get all categories - works with or without database"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// Auto-set base URL if not configured",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8081');",
					"}",
					"",
					"// Auto-set test credentials if not configured", 
					"if (!pm.environment.get('test_phone')) {",
					"    pm.environment.set('test_phone', '+1234567890');",
					"}",
					"if (!pm.environment.get('test_email')) {",
					"    pm.environment.set('test_email', 'test@finora.app');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Log response details for debugging",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Request failed:', pm.request.method, pm.request.url);",
					"    console.log('Status:', pm.response.code, pm.response.status);",
					"    if (pm.response.json) {",
					"        try {",
					"            console.log('Error details:', JSON.stringify(pm.response.json(), null, 2));",
					"        } catch (e) {",
					"            console.log('Raw response:', pm.response.text());",
					"        }",
					"    }",
					"} else {",
					"    console.log('‚úÖ Request successful:', pm.request.method, pm.request.url);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "test_phone",
			"value": "+1234567890",
			"type": "string"
		},
		{
			"key": "test_email", 
			"value": "test@finora.app",
			"type": "string"
		}
	]
}
