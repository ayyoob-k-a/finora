version: '3.8'

services:
  # Finora API Application
  finora-api:
    build: .
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=finora_user
      - DB_PASSWORD=finora_password
      - DB_NAME=finora_db
      - DB_SSLMODE=disable
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      
      # JWT Configuration
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-12345678
      - JWT_EXPIRY=24h
      - REFRESH_TOKEN_EXPIRY=168h
      
      # Server Configuration
      - PORT=8080
      - GIN_MODE=debug
      
      # SMTP Configuration (optional - configure with your email provider)
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # Twilio Configuration (optional - configure with your Twilio account)
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      
      # File Upload Configuration
      - MAX_FILE_SIZE=10MB
      - UPLOAD_PATH=/app/uploads
      
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - finora-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=finora_db
      - POSTGRES_USER=finora_user
      - POSTGRES_PASSWORD=finora_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - finora-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finora_user -d finora_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    networks:
      - finora-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for Database Management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@finora.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - finora-network
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  finora-network:
    driver: bridge
